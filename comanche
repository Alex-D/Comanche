#!/usr/bin/perl

##### Auteurs #####
## Romain Lefevre
## Alexandre Demode


use Socket;
use File::MimeInfo;


# Quitte s'il manque le paramètre
die("Option nécessaire parmi : start, stop, status, reload\n") if ($#ARGV < 0);


# Récupère la commande
$commande = $ARGV[0]; # start, stop, status, reload


# Configuration
$pidfile = ".comanche.pid";
chargerconfig();


# Compteurs
$reqrecues = 0;
$reqtraitees = 0;


# Liste des pid des fils
@fils = ();


# Traitement de la commande à lancer
if ($commande eq "start") {
    die("Une autre instance de Commanche est déjà en cours...\n") if(-f $pidfile);
    lancerserveur();    

} elsif ($commande eq "status") {
    kill USR1, pidserv() || die("Le serveur n'est pas lancé\n");

} elsif ($commande eq "reload") {
    kill HUP, pidserv() || die("Le serveur n'est pas lancé\n");

} elsif ($commande eq "stop") {
    kill QUIT, pidserv() || die("Le serveur n'est pas lancé\n");

    ajouterlog("stop");

    unlink($pidfile);
} else {
    die("Paramètre non pris en charge. Paramètres autorisés : start, stop, status, reload\n");
}





# Récupère le pid du fils
sub pidserv
{
    open my $filsh, "<", $pidfile;
    my $pid = <$filsh>;
    close $filsh;

    return $pid;
}

# Arrête le serveur brutalement en affichant un message d'erreur
# Supprime le pidfile de façon à pouvoir relancer le serveur
sub sockerr
{
    my ($err) = @_;
    unlink $pidfile;
    die $err . "\n";
}





# Lance le serveur
sub lancerserveur
{
    # Crée un fork et tue le père pour rendre la main
    $pid = fork;
    if ($pid != 0) {
        # Stock le pid du fils
        open  PID, ">", $pidfile;
        print PID $pid;
        chmod 0400, $pidfile;
        close PID;

        # Tue le père
        exit 0;
    }

    ajouterlog("start");


    # Traitement des signaux : définition des handlers
    #   USR1 => status
    $SIG{USR1} = \&status;
    #   HUP => reload
    $SIG{HUP}  = \&chargerconfig;
    #   QUIT => stop
    $SIG{QUIT} = \&stop;
    #   CHLD => retirerfils
    $SIG{CHLD} = \&retirerfils;

    
    # Lancement de la socket
    socket(SERVEUR, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
    setsockopt(SERVEUR, SOL_SOCKET, SO_RUSEADDR, 1);

    $port = $config{"global"}{"port"};
    $addr = sockaddr_in($port, INADDR_ANY)  || sockerr("sockaddr_in error");
    bind(SERVEUR, $addr)                    || sockerr("Le port $port est déjà utilisé");
    listen(SERVEUR, SOMAXCONN)              || sockerr("listen error");

    printf "Serveur lancé sur le port $port\n";

    $started = 1;

    while (accept(CLIENT, SERVEUR) or do { last if $started eq 0; next if $!{EINTR}; sockerr("Accept impossible ($!)"); }) {
        $reqrecues += 1;

        autoflush CLIENT 1;


        if ($#fils >= $config{"global"}{"clients"}) {
            # Erreur 503 s'il y a trop de clients simultannés
            my $reponse =   "<!DOCTYPE html><html><head><meta charset='utf-8'><title>503 Service Unavailable</title></head><body>" .
                            "<h1>503 Service Unavailable</h1>" .
                            "<h2>Trop de connexions simultanées, réessayez plus tard</h2>" .
                            "</body></html>";

            printf CLIENT   "HTTP/1.1 503 Service Unavailable\r\n" .
                            "Content-Type: text/html; charset=utf-8\r\n" .
                            "Content-Length: " . length($reponse) . "\r\n\r\n" .
                            $reponse;
        } else {
            # Traitement de la requête sinon
            $reqtraitees += 1;

            # Création d'un ouvrier
            $pid = fork;
            
            if ($pid == 0) {
                # Analyse de la requête
                $req = <CLIENT>;
                while (<CLIENT> =~ /^\r?\n/) {}

                $req =~ /(?-i)GET(?i)\s(\/(?:.*))\sHTTP\/1\.1/ || repondre400();
                $req = $1;


                # Récupère l'adresse IP
                $peer           = getpeername CLIENT;
                ($pcli, $iaddr) = sockaddr_in($peer);
                $ip             = inet_ntoa($iaddr);

                # Récupération du nom et du type du fichier
                @fichier  = recupererchemin($req);
                $fichier  = $fichier[1];
                $mimetype = "text/html";
                $type     = "get-d";


                # Si le fichier n'existe pas, on retourne une erreur 404
                repondre404() unless(-e $fichier);


                # Si c'est un executable
                if ($fichier[0] eq "exec") {
                    $reponse = executer($fichier);
                } else {
                    # Si c'est un dossier et qu'il y a un index
                    # On définit l'index comme le fichier à lire
                    $fichier = $fichier."/".$config{"global"}{"index"} if(-d $fichier && -f $fichier."/".$config{"global"}{"index"});

                    # Si c'est un dossier, on génère le HTML qui liste les fichiers
                    # Sinon, on lit le fichier
                    ($reponse, $mimetype) = (-d $fichier)
                        ? indexdossier($fichier)
                        : lirefichier($fichier)
                    ;

                    # Filtrage des mimetypes autorisés
                    repondre501() unless($mimetype =~ m{^(text/.*|image/p?jpeg)$});

                    $type = "get-s";
                }

                # On envoie la réponse
                printf CLIENT "HTTP/1.1 200 OK\r\n" .
                              "Content-Type: $mimetype\r\n" .
                              "Content-Length: " . length($reponse) . "\r\n\r\n";
                              
                # /!\ print et non printf sinon les images bugguent...
                print  CLIENT $reponse;

                close CLIENT;

                ajouterlog($type, $ip, $req, $fichier, 200);

                exit 0;
            }

            push(@fils, $pid);
        }

        close CLIENT;
    }

    close CLIENT;
    close SERVEUR;
}





#########  HANDLERS  #######################################################################################

# Charge la configuration
sub chargerconfig
{
    # Vide la configuration
    undef %config;

    # Charge la configuration depuis le fichier comanche.conf
    open my $configh, "comanche.conf" || die("Impossible de charger le fichier de configuration\n");
    while(<$configh>) {
        if(/^set\s+(.+)\s+(.+)/){
            $cle    = $1;
            $valeur = $2;

            if($cle =~ /port/){         # Validation du port TCP
                die("[Erreur configuration] Port invalide\n") unless($valeur =~ /[\d+]/ && $valeur >= 1 && $valeur <= 65535);
            } elsif($cle =~ /clients/){ # Validation du nombre de clients
                die("[Erreur configuration] Nombre de clients invalide\n") unless($valeur =~ /\d+/);
            } elsif($cle =~ /default/){ # Validation du fichier par défaut
                die("[Erreur configuration] Fichier default inaccessible\n") unless(-f $valeur);
            } elsif($cle =~ /basedir/){ # Validation du dossier de base
                die("[Erreur configuration] Dossier de base inaccessible\n") unless(-d $valeur);
            }

            $config{"global"}{$cle} = $valeur;
        } elsif (/^route\s+(.+?)\s+to\s+(.+)/) {
            $config{"routes"}{$1} = $2;
            push(@{$config{"rewriterules"}}, $1);
        } elsif (/^exec\s+(.+?)\s+from\s+(.+)/) {
            $config{"exec"}{$1} = $2;
            push(@{$config{"rewriterules"}}, $1);
        } 
    }
    close $configh;
}


# Arrête le serveur
sub stop
{
    $started = 0;

    while (wait != -1) {}
}


# Affiche le status du serveur
sub status
{
    local $, = ", ";
    print "PID du processus principal : $$\n" .
          "Nombre de requêtes :\n" .
          "\treçues : $reqrecues\n" .
          "\ttraitées : $reqtraitees\n" .
          "Nombre d'ouvriers actifs : $#fils\n";
    print @fils;

    close CLIENT;
}


# Retire le fils mort de la liste des fils
sub retirerfils
{
    my $pid = wait();
    @fils = grep { $_ != $pid } @fils;
}





#########  ROUTAGE  #######################################################################################

# Retourne la route associée à la requête
sub recupererroute
{
    my ($req) = @_;

    # Gestion du dossier de base
    $basedir = $config{"global"}{"basedir"} if (exists $config{"global"}{"basedir"});

    # Parcours de toutes les règles de réécriture (routes & exec)
    for $route (@{$config{"rewriterules"}}) {
        if ($req =~ /$route/) {
            if (exists $config{"routes"}{$route}) {
                return ("route", $route, $basedir . $config{"routes"}{$route});
            } elsif (exists $config{"exec"}{$route}) {
                return ("exec", $route, $basedir . $config{"exec"}{$route});
            }
        }
    }

    # Si la route ne correspond à rien, on retourne une 404
    repondre404();
}


# Donne le chemin réel du fichier demandé par la requête
sub recupererchemin
{
    my ($fichier) = @_;
    my @route = recupererroute($fichier);
    my $p1 = qr/$route[1]/;

    $_ = $fichier;

    # TODO : faire proprement la transformation avec s/// et l'interprétation du \1
    my @matches = m/$p1/;
    my $p2 = $route[2];

    for (@matches) {
	   $m = $matches[$i++];
	   $p2 =~ s{\\$i}{$m};
    }

    m/$p2/;

    return ($route[0], $p2);
}





#########  ERREURS HTTP  ###################################################################################

# Réponse en cas de requête invalide
sub repondre400
{
    my $reponse = "<!DOCTYPE html><html><head><meta carset='utf-8'><title>400 Bad Request</title></head><body>" .
                  "<h1>400 Bad Request</h1>" .
                  "<h2>Requête invalide</h2>" .
                  "</body></html>";

    printf CLIENT "HTTP/1.1 400 Bad Request\r\n" .
                  "Content-Type: text/html; charset=utf-8\r\n" .
                  "Content-Length: " . length($reponse) . "\r\n\r\n" .
                  $reponse;

    close CLIENT;

    exit 0;
}


# Renvoie une erreur 404
sub repondre404
{
    # Par défaut, la réponse sera la page définie dans la configuration
    my ($reponse, $mimetype) = lirefichier($config{"global"}{"default"});

    # On envoie la réponse
    printf CLIENT "HTTP/1.1 404 Not Found\r\n" .
                  "Content-Type: $mimetype\r\n" .
                  "Content-Length: " . length($reponse) . "\r\n\r\n" .
                  $reponse;

    # Ajout au log de la requête effectuée
    ajouterlog("get-s", $ip, $req, $config{"global"}{"default"}, 404);

    close CLIENT;

    exit 0;
}


# Réponse aux fonctions non-implémentées
sub repondre501
{
    my $reponse = "<!DOCTYPE html><html><head><meta carset='utf-8'><title>501 Not Implemented</title></head><body>" .
                  "<h1>501 Not Implemented</h1>" .
                  "</body></html>";

    printf CLIENT "HTTP/1.1 501 Not Implemented\r\n" .
                  "Content-Type: text/html; charset=utf-8\r\n" .
                  "Content-Length: " . length($reponse) . "\r\n\r\n" .
                  $reponse;

    close CLIENT;

    exit 0;
}





#########  OUTILS  #######################################################################################

# Retourne le contenu d'un fichier
sub lirefichier
{
    my ($fichier) = @_;
    my $contenu;

    open my $fichierh, $fichier || return "";
    $contenu .= $_ while(<$fichierh>);
    close $fichierh;

    return ($contenu, mimetype($fichier));
}


# Liste le contenu d'un dossier, formaté en HTML
sub indexdossier
{
    my ($dossier) = @_;
    my $requete = $req;

    local $/ = "/";
    chomp($dossier);
    chomp($requete);

    my $html = "<!DOCTYPE html><html><head><meta carset='utf-8'><title>Index</title></head><body>" .
               "<h1>Index de $requete</h1>
               <ul>";

    opendir my $dirh, $dossier;
    my @fichiers = sort(grep(!/^\.$/, readdir $dirh)); # Retire la ligne "." + tri
    $html .= "<li><a href='$requete/$_'>$_</a></li>" for (@fichiers);
    close $dirh;

    $html .= "</ul></body></html>";

    return ($html, "text/html");
}


# Ajoute une ligne au log de la forme
# <date>;<type>;<machine>;<requête>;<projection>;<réponse>;
sub ajouterlog
{
    my ($type, @args) = @_;

    open my $logh, ">>", $config{"global"}{"logfile"};

    my @line = ($type eq "start" || $type eq "stop")
        ? (time(), $type, "local", $conf{"port"}, "", "", "")
        : (time(), @_)
    ;

    local $, = ";";
    print $logh @line, "\n";
    
    close $logh;
}


# Executer CGI
# TODO : gérer les paramètres
sub executer
{
    my ($exec) = @_;
    return `$exec`;
}
