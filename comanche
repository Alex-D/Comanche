#!/usr/bin/perl


# Quitte s'il manque le paramètre
die("Option nécessaire parmis : start, stop, status, reload\n") if($#ARGV < 0);


# Récupère la commande
$commande = $ARGV[0]; # start, stop, status


# Lecture de la configuration
chargerconfig();


# Liste des pid des fils
@fils = ();



if($commande eq "start"){
	# Crée un fork et tue le père pour rendre la main
	$pid = fork;
	if($pid != 0){
		# Stock le pid du fils
		open(PID, ">$pidfile");
		print PID $pid;
		close(PID);

		addlog("start");

		# Tue le père
		exit 0;
	}


	# Traitement des signaux
	#   KILL => stop
	$SIG{KILL} = \&stop;
	#   USR1 => status
	$SIG{USR1} = \&status;

	
	# TODO: Traitement des requêtes (fils background)

	
} elsif($commande eq "status"){
	# status
	kill USR1, pidserv() || die("Le serveur n'est pas lancé\n");
} elsif($commande eq "stop"){
	# stop
	kill KILL, pidserv() || die("Le serveur n'est pas lancé\n");

	unlink($pidfile);
} elsif($commande eq "reload"){
	chargerconfig();
} else {
	die("Paramètre non pris en charge. Paramètres autorisés : start, stop, status, reload\n");
}




# Charge la configuration
sub chargerconfig {
	# Vide la configuration
	undef %config;

	# Charge la configuration depuis le fichier comanche.conf
	open(CONFIG, "comanche.conf") || die("Impossible de charger le fichier de configuration\n");
	while(<CONFIG>) {
		if(/^set\s+(.+)\s+(.+)/){
			$cle 	= $1;
			$valeur = $2;

			if($cle =~ /port/){			# Validation du port TCP
				die("[Erreur configuration] Port invalide\n") unless($valeur =~ /[\d+]/ && $valeur >= 1 && $valeur <= 65535);
			} elsif($cle =~ /clients/){	# Validation du nombre de clients
				die("[Erreur configuration] Nombre de clients invalide\n") unless($valeur =~ /\d+/);
			} elsif($cle =~ /default/){ # Validation du fichier par défaut
				die("[Erreur configuration] Fichier default inaccessible\n") unless(-f $valeur);
			} elsif($cle =~ /index/){	# Validation du fichier d'index
				die("[Erreur configuration] Fichier index inaccessible\n") unless(-f $valeur);
			}

			$config{"global"}{$cle} = $valeur;
		} elsif (/^route\s+(.+?)\s+to\s+(.+)/) {
			$config{"routes"}{$1} = $2;
		} elsif (/^exec\s+(.+?)\s+from\s+(.+)/) {
			$config{"exec"}{$1} = $2;
		} 
	}
	close(CONFIG);
}


# Récupère le pid du fils
sub pidserv {
	open(FILS, ".pid");
	$pid = <FILS>;
	close(FILS);

	return $pid;
}


# Arrête le serveur
sub stop {
	while(wait != -1){}
	addlog("stop");
	exit 0;
}


# Affiche le status du serveur
sub status {
	local $, = ", ";
	print "PID du processus principal : $$\n";
	print "Nombre de requêtes :\n";
	print "\treçues : $reqrecues\n";
	print "\ttraitées : $reqtraitees\n";
	print "Nombre d'ouvriers actifs : $#fils\n";
	print @fils;
}


# Ajoute une ligne au log de la forme
# <date>;<type>;<machine>;<requête>;<projection>;<réponse>;
sub addlog {
	open(LOG, ">>$logfile");

	if($_[0] == "start" || $_[0] == "stop"){
		@line = (localtime(time), $_[0], "local", $conf{"port"},,,);
	} else {
		@line = (localtime(time), @_);
	}

	local $, = ";";
	print @line;
	
	close(LOG);
}